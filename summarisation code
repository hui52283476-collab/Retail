import sys
import os
from docx import Document
import requests
import json

# OpenRouter API configuration
API_URL = "https://openrouter.ai/api/v1/chat/completions"
OPENROUTER_API_KEY = "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"
MODEL = "google/gemma-2-9b-it:free"

def read_docx(file_path):
    """Read the text from a DOCX file."""
    try:
        if not os.path.exists(file_path):
            return None, f"File '{file_path}' does not exist."
        doc = Document(file_path)
        full_text = [paragraph.text for paragraph in doc.paragraphs if paragraph.text.strip()]
        text = '\n'.join(full_text)
        if not text:
            return None, "No text found in the DOCX file."
        return text, None
    except Exception as e:
        return None, f"Error reading DOCX file: {str(e)}"

def summarize_text(text, max_tokens=200):
    """
    Summarizes the input text using OpenRouter's API.
    
    Args:
        text (str): The input text to summarize.
        max_tokens (int): Maximum tokens for the summary (default: 200).
    
    Returns:
        str: The generated summary, or an error message if the request fails.
    """
    if not text or not text.strip():
        return "No input text provided for summarization."
    
    messages = [
        {
            "role": "system",
            "content": (
                "You are an expert summarizer. Your task is to create a concise and accurate summary of the provided text. "
                "Focus on the main ideas and key points, omitting minor details. Ensure the summary is clear, coherent, "
                "and captures the essence of the text in 50-200 words."
            )
        },
        {
            "role": "user",
            "content": f"Please summarize the following text:\n\n{text}"
        }
    ]
    
    payload = {
        "model": MODEL,
        "messages": messages,
        "max_tokens": max_tokens,
        "temperature": 0.3
    }
    
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "HTTP-Referer": "",  # Optional: Your app's URL
        "X-Title": ""  # Optional: Your app's name
    }
    
    try:
        response = requests.post(API_URL, headers=headers, json=payload)
        response.raise_for_status()
        
        result = response.json()
        
        if 'choices' in result and len(result['choices']) > 0:
            return result['choices'][0]['message']['content'].strip()
        else:
            return f"Unexpected API response: {json.dumps(result, indent=2)}"
    
    except requests.exceptions.RequestException as e:
        return f"Error calling API: {str(e)}"
    except json.JSONDecodeError as e:
        return f"Error parsing API response: {str(e)}"
    except KeyError as e:
        return f"Error in API response structure: {str(e)}"

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python summarizer.py <path_to_docx_file>")
        sys.exit(1)

    file_path = sys.argv[1]
    if not file_path.endswith('.docx'):
        print("Error: Please provide a .docx file.")
        sys.exit(1)

    text, error = read_docx(file_path)
    if error:
        print(error)
        sys.exit(1)
    
    print(f"\nTotal characters extracted: {len(text)}")
    summary = summarize_text(text)
    print("\nSummary:\n", summary)
