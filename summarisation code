import requests
import json

API_URL = "https://openrouter.ai/api/v1/chat/completions"
OPENROUTER_API_KEY = "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" 
MODEL = "google/gemma-2-9b-it:free"

def summarize_text(text, max_tokens=200):
    """
    Summarizes the input text using OpenRouter's API.
    
    Args:
    text (str): The input text to summarize.
    max_tokens (int): Maximum tokens for the summary (default: 200).
    
    Returns:
    str: The generated summary, or an error message if the request fails.
    """
    if not text.strip():
        return "No input text provided."
    
    messages = [
        {
            "role": "system",
            "content": "You are a helpful summarizer. Provide a concise summary of the given text, capturing the main points without unnecessary details."
        },
        {
            "role": "user",
            "content": f"Summarize the following text:\n\n{text}"
        }
    ]
    
    payload = {
        "model": MODEL,
        "messages": messages,
        "max_tokens": max_tokens,
        "temperature": 0.3
    }
    
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "HTTP-Referer": "",  # Optional: Your app's URL
        "X-Title": ""  # Optional: Your app's name
    }
    
    try:
        response = requests.post(API_URL, headers=headers, json=payload)
        response.raise_for_status()
        
        result = response.json()
        
        if 'choices' in result and len(result['choices']) > 0:
            return result['choices'][0]['message']['content'].strip()
        else:
            return f"Unexpected response: {json.dumps(result, indent=2)}"
    
    except requests.exceptions.RequestException as e:
        return f"Error calling API: {str(e)}"
    except json.JSONDecodeError as e:
        return f"Error parsing response: {str(e)}"
    except KeyError as e:
        return f"Error in response structure: {str(e)}"

if __name__ == "__main__":
    # Your provided text inserted here
    input_text = """你們那個最難，你們是retail,

最難是你們。 Retail我剛剛confirm了，都蠻惡的，因為呢 … 呃

…
給不到詳細的KPI table有simplified table，我還在問，應該可以，但是要看怎 麼做。Summarization result是可以的，我可以肯定結果是很棒的。問題transcript給不到我們，我們有什麼做到呢？
有幾件事要做的，如果是這個specific case，我們可以研究如何base on這些quality summarization result，用不同的LLM來猜原來的transcipt是怎樣。

然後我們再發送給那邊的company，然後看看它可不可以加一些減一點。然後就砌一套evaluation data set出來，這個是我的想法，不過我講完整件事，其實 就因為這個是其中一部分，但整件事其實就是我們都是要設置pipeline，即是 我們要做這件事。

設置pipeline就是receive audio, file，然後transcribe into text。
所有人都在？在的

問題就是 . . . 我們有幾個 . . . 好，試 試

ASL，然後是summarization 接著pipeline就是根據summarization的result再 match KPI 或者是match其他東西，概念就是這樣，有三部分。

我就跟其中一些公司傾，然後那些policy很strict，它有summarization result，但 它不可以給我們錄音，不可以給錄音，transcript都不能給我們，那KPI table亦 不能提供詳細的KPI table，但無論如何我們現在不用考慮這些，我們現在考慮的是如何弄一個pipeline，到時有的話我們可以馬上使用。

如果是這樣的話，我就看你們的意見，因為你們知道有三大部分，每一部分其實都大，就是ASL , Summarization , Transcript 然後還有 match table，即是三個元 素在裡面，那你們會想在三個集中做一個，還是大家去 free explore一下不同 的東西？好像集中一個比較好，還是三個做三個比較好？

好像集中的話不夠全面，每樣做一點，會不會好像… 做到多少就多少，每樣做一點，如果你有錄音就更加好，你有錄音的話，我們自己有數據。

有些 template可以先測試一下，因為公司的規定不是每個人都可以提供。但無論如何我們都會先測試一下。因為我們會做notetaking，然後再match一下progress，我們會再做出來再測試一下，到時候的 data能不能run，這樣就簡單一點了。

這樣就三部分，我建議summarization 和transcript 是要一齊的，因為沒意義的，因為你沒理由對transcript的字有多少，你一定是看重點能不能take。所以就是我們開會有個錄音，然後有個錄音，然後你們take了 key point，說了一大堆廢話，你們看一下transcript，最後不同的combination之後，因為它是ASR不同的工具，然後再發送到不同的summarization tools，即是不同的LLM，然後最後就有summarization的 result 出來，對比summarization result和人手的result，看看它準確還是不準確，即是risk on 還是risk off。

這是一個experiment，你clearly地看到它沒有guarantee，也不知道可以做多少，其實只有PR的use case 是有guarantee 的，這是好事，沒有guarantee 就沒有expectation，在這個情況下我們要做一個pipeline，我們要做一個（），入 audio file，再之後convert to transcript，再將這些transcript再send去不同的LMN / LLM，然後就finally做了一個submission table出來。這個是step one，我們要有一個pipeline，我們focus這part，之後那個就之後才搞，看看還做不做得先。

用不同的 summarization tools

用不同的 audio file，即是有個audio file怎樣gen個transcript出來是一個task來的，隨便找個人做，然後將這些transcript扔去不同的L LM，再return回來的結果。另一個task來的，第三個task就是整一個auto metric去match這些結果會不 會人手write notes。第三個 task

1 2 3，三個task看誰會做

甚麼audio都可以？就這個audio吧，有沒有人錄音的？即是拿這個做？就拿這個做，先做著會好一點的，有一個叫（ ），廣東話可以出你也可以試試其他東西，因為廣東話是其中一個圖段。"""
    
    # Generate summary
    summary = summarize_text(input_text)
    
    print("\nSummary:")
    print(summary)
