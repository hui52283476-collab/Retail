import requests
import json


API_URL = "https://openrouter.ai/api/v1/chat/completions"


OPENROUTER_API_KEY = "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" 

# Choose a model (free options available; see https://openrouter.ai/models for more)
MODEL = "google/gemma-2-9b-it:free"  # Free model that works well for summarization; alternatives: "meta-llama/llama-3.1-8b-instruct:free"

def summarize_text(text, max_tokens=200):
    """
    Summarizes the input text using OpenRouter's API.
    
    Args:
    text (str): The input text to summarize.
    max_tokens (int): Maximum tokens for the summary (default: 200).
    
    Returns:
    str: The generated summary, or an error message if the request fails.
    """
    if not text.strip():
        return "No input text provided."
    
    # Prompt for summarization
    messages = [
        {
            "role": "system",
            "content": "You are a helpful summarizer. Provide a concise summary of the given text, capturing the main points without unnecessary details."
        },
        {
            "role": "user",
            "content": f"Summarize the following text:\n\n{text}"
        }
    ]
    
    # Prepare the payload (OpenAI-compatible format)
    payload = {
        "model": MODEL,
        "messages": messages,
        "max_tokens": max_tokens,
        "temperature": 0.3  # Low temperature for factual, consistent summaries
    }
    
    # Headers
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "HTTP-Referer": "",  # Optional: Your app's URL (e.g., for leaderboard)
        "X-Title": ""  # Optional: Your app's name
    }
    
    try:
        response = requests.post(API_URL, headers=headers, json=payload)
        response.raise_for_status()  # Raise an error for bad status codes
        
        result = response.json()
        
        # Extract the summary from the response
        if 'choices' in result and len(result['choices']) > 0:
            return result['choices'][0]['message']['content'].strip()
        else:
            return f"Unexpected response: {json.dumps(result, indent=2)}"
    
    except requests.exceptions.RequestException as e:
        return f"Error calling API: {str(e)}"
    except json.JSONDecodeError as e:
        return f"Error parsing response: {str(e)}"
    except KeyError as e:
        return f"Error in response structure: {str(e)}"

# Main script to run in Google Colab
if __name__ == "__main__":
    # Get input text from user
    input_text = input("Enter the text to summarize: ")
    
    # Generate summary
    summary = summarize_text(input_text)
    
    print("\nSummary:")
    print(summary)
